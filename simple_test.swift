#!/usr/bin/env swift

import Foundation

// –¢–µ—Å—Ç–æ–≤—ã–µ JSON –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å ffprobe
let testJSON = """
{
  "streams": [
    {
      "index": 0,
      "codec_name": "h264",
      "codec_type": "video",
      "width": 320,
      "height": 240,
      "r_frame_rate": "30/1",
      "avg_frame_rate": "30/1"
    },
    {
      "index": 1,
      "codec_name": "aac",
      "codec_type": "audio"
    }
  ],
  "format": {
    "duration": "2.000000",
    "bit_rate": "128000"
  }
}
"""

func testJSONParsing() {
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    guard let data = testJSON.data(using: .utf8) else {
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏")
        return
    }
    
    do {
        guard let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å")
            return
        }
        
        guard let format = json["format"] as? [String: Any] else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª format")
            return
        }
        
        guard let streams = json["streams"] as? [[String: Any]] else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª streams")
            return
        }
        
        if streams.isEmpty {
            print("‚ùå –ù–µ—Ç –ø–æ—Ç–æ–∫–æ–≤ –≤ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–µ")
            return
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let durationString = format["duration"] as? String ?? "0"
        let duration = TimeInterval(durationString) ?? 0
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∏—Ç—Ä–µ–π—Ç
        let bitrateString = format["bit_rate"] as? String ?? "0"
        let bitrate = Int64(bitrateString) ?? 0
        
        // –ò—â–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
        var videoStream: [String: Any]?
        var audioStream: [String: Any]?
        
        for stream in streams {
            if let codecType = stream["codec_type"] as? String {
                if codecType == "video" && videoStream == nil {
                    videoStream = stream
                } else if codecType == "audio" && audioStream == nil {
                    audioStream = stream
                }
            }
        }
        
        guard let video = videoStream else {
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫")
            return
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        let width = video["width"] as? Int ?? 0
        let height = video["height"] as? Int ?? 0
        let videoCodec = video["codec_name"] as? String
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if width <= 0 || height <= 0 {
            print("‚ö†Ô∏è –í–∏–¥–µ–æ –∏–º–µ–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: \(width)x\(height)")
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º FPS
        var frameRate: Double = 30.0
        if let rFrameRate = video["r_frame_rate"] as? String, !rFrameRate.isEmpty {
            let components = rFrameRate.split(separator: "/")
            if components.count == 2,
               let numerator = Double(components[0]),
               let denominator = Double(components[1]),
               denominator > 0 {
                frameRate = numerator / denominator
            }
        } else if let avgFrameRate = video["avg_frame_rate"] as? String, !avgFrameRate.isEmpty {
            let components = avgFrameRate.split(separator: "/")
            if components.count == 2,
               let numerator = Double(components[0]),
               let denominator = Double(components[1]),
               denominator > 0 {
                frameRate = numerator / denominator
            }
        }
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ
        let hasAudio = audioStream != nil
        let audioCodec = audioStream?["codec_name"] as? String
        
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω!")
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \(duration) —Å–µ–∫—É–Ω–¥")
        print("   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: \(width)x\(height)")
        print("   FPS: \(frameRate)")
        print("   –ë–∏—Ç—Ä–µ–π—Ç: \(bitrate)")
        print("   –í–∏–¥–µ–æ –∫–æ–¥–µ–∫: \(videoCodec ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")")
        print("   –ï—Å—Ç—å –∞—É–¥–∏–æ: \(hasAudio)")
        print("   –ê—É–¥–∏–æ –∫–æ–¥–µ–∫: \(audioCodec ?? "–Ω–µ—Ç")")
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É VideoInfo (–∏–º–∏—Ç–∏—Ä—É–µ–º)
        struct VideoInfo {
            let duration: TimeInterval
            let width: Int
            let height: Int
            let frameRate: Double
            let bitrate: Int64
            let hasAudio: Bool
            let audioCodec: String?
            let videoCodec: String?
        }
        
        let videoInfo = VideoInfo(
            duration: duration,
            width: width,
            height: height,
            frameRate: frameRate,
            bitrate: bitrate,
            hasAudio: hasAudio,
            audioCodec: audioCodec,
            videoCodec: videoCodec
        )
        
        print("‚úÖ VideoInfo —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testJSONParsing()