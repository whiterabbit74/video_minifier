#!/usr/bin/env swift

import Foundation

/// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Å–∂–∞—Ç–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –æ–∫–æ–Ω
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ 255 –æ—Ç FFmpeg –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–º–µ–Ω–∞, –∞ –Ω–µ –∫–∞–∫ –æ—à–∏–±–∫–∞

print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Å–∂–∞—Ç–∏—è...")

// –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–æ–≤ –≤—ã—Ö–æ–¥–∞ FFmpeg
func handleFFmpegExitCode(_ exitCode: Int32, wasCancelled: Bool) -> (isError: Bool, message: String) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if wasCancelled {
        return (false, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    switch exitCode {
    case 0:
        return (false, "–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
    case 255, -15:
        // –ö–æ–¥ 255 –∏–ª–∏ -15 –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç SIGTERM (–æ—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
        return (false, "FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —Å SIGTERM (–æ—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)")
    case -9:
        // SIGKILL - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        return (false, "FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —Å SIGKILL")
    case 1:
        // –û–±—â–∞—è –æ—à–∏–±–∫–∞ FFmpeg
        return (true, "–û–±—â–∞—è –æ—à–∏–±–∫–∞ FFmpeg (–∫–æ–¥ 1)")
    case 2:
        // –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        return (true, "–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã FFmpeg (–∫–æ–¥ 2)")
    default:
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        return (true, "FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: \(exitCode)")
    }
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–¥–∞ 255 –±–µ–∑ –æ—Ç–º–µ–Ω—ã
print("\nüîç –¢–µ—Å—Ç 1: –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ 255 –±–µ–∑ —è–≤–Ω–æ–π –æ—Ç–º–µ–Ω—ã")
let result1 = handleFFmpegExitCode(255, wasCancelled: false)
print("   –†–µ–∑—É–ª—å—Ç–∞—Ç: \(result1.message)")
print("   –≠—Ç–æ –æ—à–∏–±–∫–∞: \(result1.isError ? "‚ùå –î–ê" : "‚úÖ –ù–ï–¢")")

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–¥–∞ 255 —Å –æ—Ç–º–µ–Ω–æ–π
print("\nüîç –¢–µ—Å—Ç 2: –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ 255 —Å —è–≤–Ω–æ–π –æ—Ç–º–µ–Ω–æ–π")
let result2 = handleFFmpegExitCode(255, wasCancelled: true)
print("   –†–µ–∑—É–ª—å—Ç–∞—Ç: \(result2.message)")
print("   –≠—Ç–æ –æ—à–∏–±–∫–∞: \(result2.isError ? "‚ùå –î–ê" : "‚úÖ –ù–ï–¢")")

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–æ–¥–æ–≤
print("\nüîç –¢–µ—Å—Ç 3: –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥—ã –≤—ã—Ö–æ–¥–∞")
let testCodes: [(Int32, Bool)] = [
    (0, false),     // –£—Å–ø–µ—Ö
    (1, false),     // –û—à–∏–±–∫–∞
    (2, false),     // –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    (-9, false),    // SIGKILL
    (-15, false),   // SIGTERM
    (255, true),    // –û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
]

for (code, cancelled) in testCodes {
    let result = handleFFmpegExitCode(code, wasCancelled: cancelled)
    let status = result.isError ? "‚ùå –û–®–ò–ë–ö–ê" : "‚úÖ –û–ö"
    print("   –ö–æ–¥ \(code) (–æ—Ç–º–µ–Ω–∞: \(cancelled)): \(status) - \(result.message)")
}

// –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω—ã
print("\nüîç –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–º–µ–Ω—ã")

class MockFFmpegProcess {
    var isRunning = false
    var terminationStatus: Int32 = 0
    var wasCancelledByUser = false
    
    func start() {
        isRunning = true
        print("   üìπ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
    }
    
    func terminate() {
        if isRunning {
            wasCancelledByUser = true
            terminationStatus = 255  // SIGTERM –æ–±—ã—á–Ω–æ –¥–∞–µ—Ç –∫–æ–¥ 255
            isRunning = false
            print("   ‚èπÔ∏è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (SIGTERM)")
        }
    }
    
    func handleTermination() -> (shouldShowError: Bool, message: String) {
        let result = handleFFmpegExitCode(terminationStatus, wasCancelled: wasCancelledByUser)
        
        if result.isError {
            return (true, "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: \(result.message)")
        } else {
            return (false, result.message)
        }
    }
}

// –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
print("\n   –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
let process1 = MockFFmpegProcess()
process1.start()
process1.terminationStatus = 0
process1.isRunning = false
let result4a = process1.handleTermination()
print("   –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É: \(result4a.shouldShowError ? "‚ùå –î–ê" : "‚úÖ –ù–ï–¢")")
print("   –°–æ–æ–±—â–µ–Ω–∏–µ: \(result4a.message)")

// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
print("\n   –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
let process2 = MockFFmpegProcess()
process2.start()
process2.terminate()  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω—É
let result4b = process2.handleTermination()
print("   –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É: \(result4b.shouldShowError ? "‚ùå –î–ê" : "‚úÖ –ù–ï–¢")")
print("   –°–æ–æ–±—â–µ–Ω–∏–µ: \(result4b.message)")

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
print("\n   –°—Ü–µ–Ω–∞—Ä–∏–π 3: –†–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ FFmpeg")
let process3 = MockFFmpegProcess()
process3.start()
process3.terminationStatus = 1  // –†–µ–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞
process3.isRunning = false
let result4c = process3.handleTermination()
print("   –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É: \(result4c.shouldShowError ? "‚ùå –î–ê" : "‚úÖ –ù–ï–¢")")
print("   –°–æ–æ–±—â–µ–Ω–∏–µ: \(result4c.message)")

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É UI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
print("\nüîç –¢–µ—Å—Ç 5: –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")

enum CompressionStatus {
    case pending
    case compressing
    case completed
    case failed(String)
    case cancelled
}

func handleCompressionResult(exitCode: Int32, wasCancelled: Bool) -> CompressionStatus {
    let result = handleFFmpegExitCode(exitCode, wasCancelled: wasCancelled)
    
    if wasCancelled || (!result.isError && (exitCode == 255 || exitCode == -15 || exitCode == -9)) {
        return .cancelled
    } else if result.isError {
        return .failed(result.message)
    } else if exitCode == 0 {
        return .completed
    } else {
        return .pending
    }
}

let testScenarios: [(String, Int32, Bool)] = [
    ("–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 0, false),
    ("–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 255, true),
    ("SIGTERM –±–µ–∑ –æ—Ç–º–µ–Ω—ã", 255, false),
    ("SIGKILL", -9, false),
    ("–û—à–∏–±–∫–∞ FFmpeg", 1, false),
    ("–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã", 2, false)
]

for (scenario, code, cancelled) in testScenarios {
    let status = handleCompressionResult(exitCode: code, wasCancelled: cancelled)
    print("   \(scenario): \(status)")
}

print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —á–∏—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
print("\nüìã –í—ã–≤–æ–¥—ã:")
print("   ‚Ä¢ –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ 255 –æ—Ç FFmpeg –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—à–∏–±–∫–∞")
print("   ‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –≤ 'pending'")
print("   ‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
print("   ‚Ä¢ –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ FFmpeg (–∫–æ–¥—ã 1, 2 –∏ –¥—Ä.) –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –æ—à–∏–±–∫–∏")