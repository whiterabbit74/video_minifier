#!/usr/bin/env swift

import Foundation

/// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–º–µ–Ω—ã —Å–∂–∞—Ç–∏—è
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∂–∞—Ç–∏—è –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ª–∏—à–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ–∫–Ω–∞
/// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ 255 —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–º–µ–Ω–∞, –∞ –Ω–µ –æ—à–∏–±–∫–∞

print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–º–µ–Ω—ã —Å–∂–∞—Ç–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
let testVideoPath = "/tmp/test_cancellation_video.mp4"
let createProcess = Process()
createProcess.executableURL = URL(fileURLWithPath: "/usr/bin/which")
createProcess.arguments = ["ffmpeg"]

let pipe = Pipe()
createProcess.standardOutput = pipe
createProcess.standardError = Pipe()

do {
    try createProcess.run()
    createProcess.waitUntilExit()
    
    if createProcess.terminationStatus != 0 {
        print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        exit(1)
    }
    
    let data = pipe.fileHandleForReading.readDataToEndOfFile()
    let ffmpegPath = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines) ?? ""
    
    if ffmpegPath.isEmpty {
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ FFmpeg")
        exit(1)
    }
    
    print("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω: \(ffmpegPath)")
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
    let createVideoProcess = Process()
    createVideoProcess.executableURL = URL(fileURLWithPath: ffmpegPath)
    createVideoProcess.arguments = [
        "-f", "lavfi",
        "-i", "testsrc=duration=10:size=320x240:rate=30",
        "-c:v", "libx264",
        "-t", "10",
        "-y",
        testVideoPath
    ]
    
    createVideoProcess.standardOutput = Pipe()
    createVideoProcess.standardError = Pipe()
    
    try createVideoProcess.run()
    createVideoProcess.waitUntilExit()
    
    if createVideoProcess.terminationStatus == 0 {
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: \(testVideoPath)")
    } else {
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ")
        exit(1)
    }
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞ 255 (SIGTERM)
    print("\nüîç –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞ 255 (SIGTERM)")
    
    let compressionProcess = Process()
    compressionProcess.executableURL = URL(fileURLWithPath: ffmpegPath)
    compressionProcess.arguments = [
        "-i", testVideoPath,
        "-c:v", "libx264",
        "-crf", "23",
        "-progress", "pipe:2",
        "-y",
        "/tmp/test_output_cancelled.mp4"
    ]
    
    let errorPipe = Pipe()
    compressionProcess.standardError = errorPipe
    compressionProcess.standardOutput = Pipe()
    
    try compressionProcess.run()
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –∑–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º
    DispatchQueue.global().asyncAfter(deadline: .now() + 1.0) {
        print("‚èπÔ∏è –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å FFmpeg...")
        compressionProcess.terminate()
    }
    
    compressionProcess.waitUntilExit()
    
    let terminationStatus = compressionProcess.terminationStatus
    print("üìä –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: \(terminationStatus)")
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–æ–≤ –≤—ã—Ö–æ–¥–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    switch terminationStatus {
    case 0:
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
    case 255, -15: // SIGTERM –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ 255 –∏–ª–∏ -15
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω (SIGTERM) - –ù–ï –û–®–ò–ë–ö–ê!")
    case -9:
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (SIGKILL) - –ù–ï –û–®–ò–ë–ö–ê!")
    case 1:
        print("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ FFmpeg - –≠–¢–û –û–®–ò–ë–ö–ê")
    case 2:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã - –≠–¢–û –û–®–ò–ë–ö–ê")
    default:
        print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: \(terminationStatus)")
    }
    
    // –ß–∏—Ç–∞–µ–º stderr –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
    let errorData = errorPipe.fileHandleForReading.readDataToEndOfFile()
    let errorString = String(data: errorData, encoding: .utf8) ?? ""
    
    if !errorString.isEmpty {
        print("üìù –í—ã–≤–æ–¥ stderr:")
        let lines = errorString.components(separatedBy: .newlines).prefix(10)
        for line in lines {
            if !line.trimmingCharacters(in: .whitespaces).isEmpty {
                print("   \(line)")
            }
        }
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã
    print("\nüîç –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã")
    
    for i in 1...3 {
        print("   –ü–æ–ø—ã—Ç–∫–∞ \(i)...")
        
        let multiProcess = Process()
        multiProcess.executableURL = URL(fileURLWithPath: ffmpegPath)
        multiProcess.arguments = [
            "-i", testVideoPath,
            "-c:v", "libx264",
            "-crf", "23",
            "-y",
            "/tmp/test_output_multi_\(i).mp4"
        ]
        
        multiProcess.standardOutput = Pipe()
        multiProcess.standardError = Pipe()
        
        try multiProcess.run()
        
        // –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞
        DispatchQueue.global().asyncAfter(deadline: .now() + 0.5) {
            multiProcess.terminate()
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã (–Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º)
            DispatchQueue.global().asyncAfter(deadline: .now() + 0.1) {
                if multiProcess.isRunning {
                    multiProcess.interrupt()
                }
            }
        }
        
        multiProcess.waitUntilExit()
        print("   ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ \(i) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º: \(multiProcess.terminationStatus)")
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ Swift –∫–æ–¥–µ
    print("\nüîç –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ Swift")
    
    func simulateFFmpegError(exitCode: Int32) -> String {
        switch exitCode {
        case 0:
            return "–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
        case 1:
            return "–û–±—â–∞—è –æ—à–∏–±–∫–∞"
        case 255, -15:
            return "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        case -9:
            return "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
        default:
            return "FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: \(exitCode)"
        }
    }
    
    let testCodes: [Int32] = [0, 1, 255, -15, -9, 2, 127]
    for code in testCodes {
        let message = simulateFFmpegError(exitCode: code)
        print("   –ö–æ–¥ \(code): \(message)")
    }
    
    // –û—á–∏—Å—Ç–∫–∞
    try? FileManager.default.removeItem(atPath: testVideoPath)
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    print("\nüìã –í–ê–ñ–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("   ‚Ä¢ –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ 255 –æ—Ç FFmpeg –ø—Ä–∏ SIGTERM –ù–ï —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π")
    print("   ‚Ä¢ –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ -15 (SIGTERM) –ù–ï —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π") 
    print("   ‚Ä¢ –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ -9 (SIGKILL) –ù–ï —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π")
    print("   ‚Ä¢ –¢–æ–ª—å–∫–æ –∫–æ–¥—ã 1, 2 –∏ –¥—Ä—É–≥–∏–µ —è–≤–ª—è—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏")
    print("   ‚Ä¢ –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –¥–∏–∞–ª–æ–≥–∏ –æ—à–∏–±–æ–∫")
    print("   ‚Ä¢ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å—Å—è –≤ 'pending', –∞ –Ω–µ 'failed'")
    
} catch {
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: \(error)")
    exit(1)
}