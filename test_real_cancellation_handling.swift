#!/usr/bin/env swift

import Foundation

/// –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Å FFmpeg
/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ FFmpeg –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –æ—à–∏–±–∫–∏

print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Å FFmpeg...")

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg
func findFFmpeg() -> String? {
    let possiblePaths = [
        "/opt/homebrew/bin/ffmpeg",  // Homebrew –Ω–∞ Apple Silicon
        "/usr/local/bin/ffmpeg",     // Homebrew –Ω–∞ Intel
        "/usr/bin/ffmpeg"            // –°–∏—Å—Ç–µ–º–Ω—ã–π FFmpeg
    ]
    
    for path in possiblePaths {
        if FileManager.default.fileExists(atPath: path) {
            return path
        }
    }
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ which
    let whichProcess = Process()
    whichProcess.executableURL = URL(fileURLWithPath: "/usr/bin/which")
    whichProcess.arguments = ["ffmpeg"]
    
    let pipe = Pipe()
    whichProcess.standardOutput = pipe
    whichProcess.standardError = Pipe()
    
    do {
        try whichProcess.run()
        whichProcess.waitUntilExit()
        
        if whichProcess.terminationStatus == 0 {
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let path = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines)
            return path?.isEmpty == false ? path : nil
        }
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ FFmpeg: \(error)")
    }
    
    return nil
}

guard let ffmpegPath = findFFmpeg() else {
    print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.")
    exit(1)
}

print("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω: \(ffmpegPath)")

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
let testVideoPath = "/tmp/test_cancellation_video.mp4"
let outputVideoPath = "/tmp/test_cancellation_output.mp4"

func createTestVideo() -> Bool {
    print("üìπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ...")
    
    let createProcess = Process()
    createProcess.executableURL = URL(fileURLWithPath: ffmpegPath)
    createProcess.arguments = [
        "-f", "lavfi",
        "-i", "testsrc=duration=30:size=640x480:rate=30",  // 30 —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ
        "-c:v", "libx264",
        "-preset", "ultrafast",  // –ë—ã—Å—Ç—Ä–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        "-t", "30",
        "-y",
        testVideoPath
    ]
    
    createProcess.standardOutput = Pipe()
    createProcess.standardError = Pipe()
    
    do {
        try createProcess.run()
        createProcess.waitUntilExit()
        
        if createProcess.terminationStatus == 0 {
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ")
            return true
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ (–∫–æ–¥: \(createProcess.terminationStatus))")
            return false
        }
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: \(error)")
        return false
    }
}

// –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞
func testQuickCancellation() {
    print("\nüîç –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞ —Å–∂–∞—Ç–∏—è")
    
    let process = Process()
    process.executableURL = URL(fileURLWithPath: ffmpegPath)
    process.arguments = [
        "-i", testVideoPath,
        "-c:v", "libx264",
        "-crf", "23",
        "-preset", "slow",  // –ú–µ–¥–ª–µ–Ω–Ω—ã–π preset –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è
        "-progress", "pipe:2",
        "-y",
        outputVideoPath
    ]
    
    let errorPipe = Pipe()
    process.standardError = errorPipe
    process.standardOutput = Pipe()
    
    do {
        try process.run()
        print("   üìπ –ü—Ä–æ—Ü–µ—Å—Å FFmpeg –∑–∞–ø—É—â–µ–Ω (PID: \(process.processIdentifier))")
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, –∑–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º
        DispatchQueue.global().asyncAfter(deadline: .now() + 1.0) {
            print("   ‚èπÔ∏è –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å...")
            process.terminate()
        }
        
        process.waitUntilExit()
        
        let exitCode = process.terminationStatus
        print("   üìä –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: \(exitCode)")
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        switch exitCode {
        case 0:
            print("   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
        case 255, -15:
            print("   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω (SIGTERM)")
        case -9:
            print("   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (SIGKILL)")
        case 1:
            print("   ‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ FFmpeg")
        default:
            print("   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: \(exitCode)")
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π
        if FileManager.default.fileExists(atPath: outputVideoPath) {
            let attributes = try? FileManager.default.attributesOfItem(atPath: outputVideoPath)
            let fileSize = attributes?[.size] as? Int64 ?? 0
            print("   üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: \(fileSize) –±–∞–π—Ç")
            
            // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
            try? FileManager.default.removeItem(atPath: outputVideoPath)
        } else {
            print("   ‚úÖ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω (–æ–∂–∏–¥–∞–µ–º–æ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ)")
        }
        
    } catch {
        print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: \(error)")
    }
}

// –¢–µ—Å—Ç 2: –û—Ç–º–µ–Ω–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func testCancellationWithProgress() {
    print("\nüîç –¢–µ—Å—Ç 2: –û—Ç–º–µ–Ω–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    
    let process = Process()
    process.executableURL = URL(fileURLWithPath: ffmpegPath)
    process.arguments = [
        "-i", testVideoPath,
        "-c:v", "libx264",
        "-crf", "23",
        "-preset", "slow",
        "-progress", "pipe:2",
        "-stats_period", "0.5",
        "-y",
        outputVideoPath
    ]
    
    let errorPipe = Pipe()
    process.standardError = errorPipe
    process.standardOutput = Pipe()
    
    var progressReceived = false
    
    do {
        try process.run()
        print("   üìπ –ü—Ä–æ—Ü–µ—Å—Å FFmpeg –∑–∞–ø—É—â–µ–Ω —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        DispatchQueue.global().async {
            let fileHandle = errorPipe.fileHandleForReading
            
            while process.isRunning {
                let data = fileHandle.availableData
                if !data.isEmpty {
                    let output = String(data: data, encoding: .utf8) ?? ""
                    if output.contains("frame=") || output.contains("time=") {
                        progressReceived = true
                        print("   üìä –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç FFmpeg")
                    }
                }
                usleep(100000) // 0.1 —Å–µ–∫—É–Ω–¥—ã
            }
        }
        
        // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –∑–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º
        DispatchQueue.global().asyncAfter(deadline: .now() + 2.0) {
            print("   ‚èπÔ∏è –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
            process.terminate()
        }
        
        process.waitUntilExit()
        
        let exitCode = process.terminationStatus
        print("   üìä –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: \(exitCode)")
        print("   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—É—á–µ–Ω: \(progressReceived ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢")")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã
        if exitCode == 255 || exitCode == -15 {
            print("   ‚úÖ –û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        } else {
            print("   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: \(exitCode)")
        }
        
        // –û—á–∏—Å—Ç–∫–∞
        try? FileManager.default.removeItem(atPath: outputVideoPath)
        
    } catch {
        print("   ‚ùå –û—à–∏–±–∫–∞: \(error)")
    }
}

// –¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã
func testMultipleCancellations() {
    print("\nüîç –¢–µ—Å—Ç 3: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã")
    
    for i in 1...3 {
        print("   –ü–æ–ø—ã—Ç–∫–∞ \(i)...")
        
        let process = Process()
        process.executableURL = URL(fileURLWithPath: ffmpegPath)
        process.arguments = [
            "-i", testVideoPath,
            "-c:v", "libx264",
            "-crf", "23",
            "-y",
            "/tmp/test_multi_\(i).mp4"
        ]
        
        process.standardOutput = Pipe()
        process.standardError = Pipe()
        
        do {
            try process.run()
            
            // –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–º–µ–Ω–∞
            DispatchQueue.global().asyncAfter(deadline: .now() + 0.5) {
                process.terminate()
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã (–Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º)
                DispatchQueue.global().asyncAfter(deadline: .now() + 0.1) {
                    if process.isRunning {
                        process.interrupt()
                    }
                }
            }
            
            process.waitUntilExit()
            
            let exitCode = process.terminationStatus
            let status = (exitCode == 255 || exitCode == -15 || exitCode == -9) ? "‚úÖ –û–ö" : "‚ö†Ô∏è \(exitCode)"
            print("     –†–µ–∑—É–ª—å—Ç–∞—Ç: \(status)")
            
            // –û—á–∏—Å—Ç–∫–∞
            try? FileManager.default.removeItem(atPath: "/tmp/test_multi_\(i).mp4")
            
        } catch {
            print("     ‚ùå –û—à–∏–±–∫–∞: \(error)")
        }
    }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
if createTestVideo() {
    testQuickCancellation()
    testCancellationWithProgress()
    testMultipleCancellations()
    
    // –û—á–∏—Å—Ç–∫–∞
    try? FileManager.default.removeItem(atPath: testVideoPath)
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("   ‚Ä¢ FFmpeg –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SIGTERM")
    print("   ‚Ä¢ –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ 255 —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
    print("   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è")
    print("   ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–º–µ–Ω—ã –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º")
    print("   ‚Ä¢ –ù–µ–ø–æ–ª–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è")
} else {
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    exit(1)
}