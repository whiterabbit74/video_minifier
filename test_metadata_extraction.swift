#!/usr/bin/env swift

import Foundation

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
func testMetadataExtraction() {
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg
    let testVideoPath = "/tmp/test_video.mp4"
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ
    let ffmpegPaths = [
        "/opt/homebrew/bin/ffmpeg",
        "/usr/local/bin/ffmpeg",
        "/usr/bin/ffmpeg"
    ]
    
    var ffmpegPath: String?
    for path in ffmpegPaths {
        if FileManager.default.fileExists(atPath: path) {
            ffmpegPath = path
            break
        }
    }
    
    guard let validFFmpegPath = ffmpegPath else {
        print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    }
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω FFmpeg: \(validFFmpegPath)")
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
    let createProcess = Process()
    createProcess.executableURL = URL(fileURLWithPath: validFFmpegPath)
    createProcess.arguments = [
        "-f", "lavfi",
        "-i", "testsrc=duration=2:size=320x240:rate=30",
        "-f", "lavfi", 
        "-i", "sine=frequency=1000:duration=2",
        "-c:v", "libx264",
        "-c:a", "aac",
        "-shortest",
        "-y",
        testVideoPath
    ]
    
    do {
        try createProcess.run()
        createProcess.waitUntilExit()
        
        if createProcess.terminationStatus == 0 {
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: \(testVideoPath)")
        } else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ")
            return
        }
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ: \(error)")
        return
    }
    
    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    testMetadataExtractionWithFFprobe(videoPath: testVideoPath, ffmpegPath: validFFmpegPath)
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    try? FileManager.default.removeItem(atPath: testVideoPath)
}

func testMetadataExtractionWithFFprobe(videoPath: String, ffmpegPath: String) {
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å ffprobe...")
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ffprobe
    let ffprobePath = ffmpegPath.replacingOccurrences(of: "ffmpeg", with: "ffprobe")
    
    let process = Process()
    if FileManager.default.fileExists(atPath: ffprobePath) {
        process.executableURL = URL(fileURLWithPath: ffprobePath)
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ffprobe: \(ffprobePath)")
    } else {
        process.executableURL = URL(fileURLWithPath: ffmpegPath)
        print("‚ö†Ô∏è ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg: \(ffmpegPath)")
    }
    
    process.arguments = [
        "-v", "quiet",
        "-print_format", "json",
        "-show_format",
        "-show_streams",
        videoPath
    ]
    
    let pipe = Pipe()
    process.standardOutput = pipe
    process.standardError = Pipe()
    
    do {
        try process.run()
        process.waitUntilExit()
        
        if process.terminationStatus == 0 {
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            
            if let jsonString = String(data: data, encoding: .utf8) {
                print("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
                print("üìä –†–∞–∑–º–µ—Ä JSON: \(data.count) –±–∞–π—Ç")
                
                // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
                do {
                    if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                        if let format = json["format"] as? [String: Any],
                           let duration = format["duration"] as? String {
                            print("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \(duration) —Å–µ–∫—É–Ω–¥")
                        }
                        
                        if let streams = json["streams"] as? [[String: Any]] {
                            print("üé¨ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: \(streams.count)")
                            
                            for (index, stream) in streams.enumerated() {
                                if let codecType = stream["codec_type"] as? String {
                                    print("   –ü–æ—Ç–æ–∫ \(index): \(codecType)")
                                    
                                    if codecType == "video" {
                                        let width = stream["width"] as? Int ?? 0
                                        let height = stream["height"] as? Int ?? 0
                                        print("     –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: \(width)x\(height)")
                                    }
                                }
                            }
                        }
                        
                        print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
                    } else {
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å")
                    }
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: \(error)")
                    print("üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ JSON:")
                    print(String(jsonString.prefix(200)))
                }
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É")
            }
        } else {
            print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: \(process.terminationStatus)")
            
            if let errorPipe = process.standardError as? Pipe {
                let errorData = errorPipe.fileHandleForReading.readDataToEndOfFile()
                if let errorString = String(data: errorData, encoding: .utf8) {
                    print("–û—à–∏–±–∫–∞: \(errorString)")
                }
            }
        }
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: \(error)")
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMetadataExtraction()